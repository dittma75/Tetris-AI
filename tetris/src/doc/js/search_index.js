var search_data = {"index":{"searchIndex":["artificialintelligence","backwardlblock","block","board","lblock","lineblock","object","sblock","squareblock","tblock","tetriswindow","tetromino","zblock","addtetromino()","buttonpressed()","causescollision?()","checkfordeepwells()","checkforneardeathplacement()","checktetonboard()","clearlines()","doaimove()","dousermove()","draw()","draw()","emptyline()","fourtyperotate()","generateaimove()","generatetetromino()","getbestmove()","getblocks()","getblocksinrewardzone()","getboard()","getbottombound()","getcolumn()","getcolumnbelowrow()","getgravitythreshold()","getheightmodifier()","getheuristic()","gethighestoccupiedrow()","getholesbelowtetromino()","getleftbound()","getlevel()","getlinesmade()","getorientation()","getorientation()","getorientation()","getrightbound()","getrotatedblocks()","getrotatedblocks()","getrotatedblocks()","getrotationtype()","getrow()","getrow()","gettopbound()","gettype()","getunrotatedblocks()","getunrotatedblocks()","getunrotatedblocks()","gravitymove()","isline?()","loadresources()","movedown()","movedown()","movedown()","moveleft()","moveleft()","moveright()","moveright()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","placetetromino()","placetetrominoleft()","placetetrominoright()","removeline()","removetetromino()","rotateleft()","rotateleft()","rotateleft()","rotateleft()","rotateleft()","rotateleft()","rotateleft()","rotateleft()","rotateright()","rotateright()","rotateright()","rotateright()","rotateright()","rotateright()","rotateright()","rotateright()","rotate_compare()","trymoves()","twotyperotate()","update()","updatescore()","usermovedown()","usermoverotate()","usermovesideways()"],"longSearchIndex":["artificialintelligence","backwardlblock","block","board","lblock","lineblock","object","sblock","squareblock","tblock","tetriswindow","tetromino","zblock","board#addtetromino()","tetriswindow#buttonpressed()","board#causescollision?()","artificialintelligence#checkfordeepwells()","artificialintelligence#checkforneardeathplacement()","object#checktetonboard()","board#clearlines()","tetriswindow#doaimove()","tetriswindow#dousermove()","board#draw()","tetriswindow#draw()","board#emptyline()","tetromino#fourtyperotate()","tetriswindow#generateaimove()","tetriswindow#generatetetromino()","artificialintelligence#getbestmove()","tetromino#getblocks()","artificialintelligence#getblocksinrewardzone()","board#getboard()","board#getbottombound()","block#getcolumn()","board#getcolumnbelowrow()","tetriswindow#getgravitythreshold()","artificialintelligence#getheightmodifier()","artificialintelligence#getheuristic()","artificialintelligence#gethighestoccupiedrow()","artificialintelligence#getholesbelowtetromino()","board#getleftbound()","tetriswindow#getlevel()","artificialintelligence#getlinesmade()","backwardlblock#getorientation()","lblock#getorientation()","tblock#getorientation()","board#getrightbound()","lineblock#getrotatedblocks()","sblock#getrotatedblocks()","zblock#getrotatedblocks()","tetromino#getrotationtype()","block#getrow()","board#getrow()","board#gettopbound()","tetromino#gettype()","lineblock#getunrotatedblocks()","sblock#getunrotatedblocks()","zblock#getunrotatedblocks()","tetriswindow#gravitymove()","board#isline?()","board#loadresources()","block#movedown()","tetriswindow#movedown()","tetromino#movedown()","block#moveleft()","tetromino#moveleft()","block#moveright()","tetromino#moveright()","artificialintelligence::new()","backwardlblock::new()","block::new()","board::new()","lblock::new()","lineblock::new()","sblock::new()","squareblock::new()","tblock::new()","tetriswindow::new()","zblock::new()","object#placetetromino()","object#placetetrominoleft()","object#placetetrominoright()","board#removeline()","board#removetetromino()","backwardlblock#rotateleft()","lblock#rotateleft()","lineblock#rotateleft()","sblock#rotateleft()","squareblock#rotateleft()","tblock#rotateleft()","tetromino#rotateleft()","zblock#rotateleft()","backwardlblock#rotateright()","lblock#rotateright()","lineblock#rotateright()","sblock#rotateright()","squareblock#rotateright()","tblock#rotateright()","tetromino#rotateright()","zblock#rotateright()","object#rotate_compare()","artificialintelligence#trymoves()","tetromino#twotyperotate()","tetriswindow#update()","tetriswindow#updatescore()","tetriswindow#usermovedown()","tetriswindow#usermoverotate()","tetriswindow#usermovesideways()"],"info":[["ArtificialIntelligence","","ArtificialIntelligence.html","","<p>Approach:  The current state of the board will be fed into the\ngetBestMove() function, which will evaluate ...\n"],["BackwardLBlock","","BackwardLBlock.html","","<p>A BackwardLBlock represents the Tetromino that looks like this: __X__ __X__\n<em>XX_</em> <em>_</em>\n"],["Block","","Block.html","","<p>A Block is a cell that is the smallest part of a Tetris Board.  Tetrominoes\nare made of exactly four ...\n"],["Board","","Board.html","","<p>A Board is the data structure that holds the value of all rows and columns\nneeded to keep track of the ...\n"],["LBlock","","LBlock.html","","<p>An LBlock represents the Tetromino that looks like this: __X__ __X__\n<em>_XX</em> <em>_</em>\n"],["LineBlock","","LineBlock.html","","<p>A LineBlock represents the Tetromino that looks like this: __X__ __X__\n__X__ __X__\n"],["Object","","Object.html","",""],["SBlock","","SBlock.html","","<p>An SBlock represents the Tetromino that looks like this: <em>_</em>\n<em>_XX</em> <em>XX_</em> <em>_</em>\n"],["SquareBlock","","SquareBlock.html","","<p>A SquareBlock represents the Tetromino that looks like this: <em>__</em>\n<em>XX</em> <em>XX</em> <em>__</em>\n"],["TBlock","","TBlock.html","","<p>A TBlock represents the Tetromino that looks like this: <em>_</em>\n<em>XXX</em> __X__ <em>_</em>\n"],["TetrisWindow","","TetrisWindow.html","","<p>A TetrisWindow is the window the renders the concept of the Tetris game\nboard as an image that the user ...\n"],["Tetromino","","Tetromino.html","","<p>Tetromino is the class that represents a generic tetromino, which is a\nshape made up of four squares ...\n"],["ZBlock","","ZBlock.html","","<p>A ZBlock represents the Tetromino that looks like this: <em>_</em>\n<em>XX_</em> <em>_XX</em> <em>_</em>\n"],["addTetromino","Board","Board.html#method-i-addTetromino","(tetromino)","<p>Add a tetromino's blocks to the Board by setting each (row, column) pair on\nthe Board that corresponds ...\n"],["buttonPressed","TetrisWindow","TetrisWindow.html#method-i-buttonPressed","()","<p>return true if any of the buttons used for controls are being pressed and\nfalse otherwise.\n"],["causesCollision?","Board","Board.html#method-i-causesCollision-3F","(tetromino)","<p>param tetromino is the Tetromino that may be causing a collision with\nBlocks from a Tetromino that has ...\n"],["checkForDeepWells","ArtificialIntelligence","ArtificialIntelligence.html#method-i-checkForDeepWells","(tetromino)","<p>Get a heuristic value based on the number of columns below the reward row\nwith 3 or more contiguous empty ...\n"],["checkForNearDeathPlacement","ArtificialIntelligence","ArtificialIntelligence.html#method-i-checkForNearDeathPlacement","(tetromino)","<p>Prioritize against placing blocks within the first 7 rows of the top of the\nboard because it can cause ...\n"],["checkTetOnBoard","Object","Object.html#method-i-checkTetOnBoard","(tet, board)","<p>Check that the tetromino is actually on the board param tet is the\ntetromino that should be on the board ...\n"],["clearLines","Board","Board.html#method-i-clearLines","()","<p>Removes cleared lines from the board @return the number of lines cleared\n"],["doAIMove","TetrisWindow","TetrisWindow.html#method-i-doAIMove","()","<p>Process for unpacking the generated move sequence into a set of left,\nright, down, and rotate moves. ...\n"],["doUserMove","TetrisWindow","TetrisWindow.html#method-i-doUserMove","()","<p>Handles the game logic for a human user playing Tetris return true if the\nTetromino was placed, false ...\n"],["draw","Board","Board.html#method-i-draw","()","<p>Draw every block of the game board with the appropriately colored cell\nbased on whether each block is ...\n"],["draw","TetrisWindow","TetrisWindow.html#method-i-draw","()","<p>Repaint the background and board on the screen.\n"],["emptyLine","Board","Board.html#method-i-emptyLine","()","<p>return an empty line, which is an array that has a number of 0s equal to\nthe number of columns in the ...\n"],["fourTypeRotate","Tetromino","Tetromino.html#method-i-fourTypeRotate","(direction)","<p>Helper that does the actual rotation for blocks with four complex\norientations, since rotateLeft and ...\n"],["generateAIMove","TetrisWindow","TetrisWindow.html#method-i-generateAIMove","()","<p>Generate the best move possible using the AI class. return the sequence\ncorresponding to the best move ...\n"],["generateTetromino","TetrisWindow","TetrisWindow.html#method-i-generateTetromino","(row, col)","<p>Randomly generates the next tetromino param row is the starting row of the\ntetromino param col is the ...\n"],["getBestMove","ArtificialIntelligence","ArtificialIntelligence.html#method-i-getBestMove","()","<p>return an array containing the best move sequence and the time that it took\nto do the move calculation. ...\n"],["getBlocks","Tetromino","Tetromino.html#method-i-getBlocks","()","<p>return the list of blocks that make up this Tetromino\n"],["getBlocksInRewardZone","ArtificialIntelligence","ArtificialIntelligence.html#method-i-getBlocksInRewardZone","(tetromino)","<p>param tetromino is the tetromino location to use for the heuristic. param\nreward_row is the highest occupied ...\n"],["getBoard","Board","Board.html#method-i-getBoard","()","<p>return the representation of the Tetris Board.\n"],["getBottomBound","Board","Board.html#method-i-getBottomBound","()","<p>return the bottom boundary of the Board\n"],["getColumn","Block","Block.html#method-i-getColumn","()","<p>return the column that this Block is in on the Board.\n"],["getColumnBelowRow","Board","Board.html#method-i-getColumnBelowRow","(row_index, col_index)","<p>param row_index is the row from which to start considering the column.\nparam index is the column index. ...\n"],["getGravityThreshold","TetrisWindow","TetrisWindow.html#method-i-getGravityThreshold","()","<p>Gravity threshold is calculated by using a starting threshold of 60, which\nmeans that the current tetromino ...\n"],["getHeightModifier","ArtificialIntelligence","ArtificialIntelligence.html#method-i-getHeightModifier","(tetromino)","<p>Try to keep the board of an even height. param tetromino is the tetromino\nlocation to use for the heuristic. ...\n"],["getHeuristic","ArtificialIntelligence","ArtificialIntelligence.html#method-i-getHeuristic","(tetromino)","<p>This function will evaluate a move based on the given tetromino's placement\non the board.  It will consider: ...\n"],["getHighestOccupiedRow","ArtificialIntelligence","ArtificialIntelligence.html#method-i-getHighestOccupiedRow","()","<p>return the index of the highest non-empty row on the Board. Note:  higher\nrows have lower indices.\n"],["getHolesBelowTetromino","ArtificialIntelligence","ArtificialIntelligence.html#method-i-getHolesBelowTetromino","(tetromino)","<p>param tetromino is the tetromino location to use for the heuristic. return\nthe number of holes below ...\n"],["getLeftBound","Board","Board.html#method-i-getLeftBound","()","<p>return the left boundary of the Board\n"],["getLevel","TetrisWindow","TetrisWindow.html#method-i-getLevel","()","<p>return the current \"level\" of the game, which is the truncated result of\ndividing the number ...\n"],["getLinesMade","ArtificialIntelligence","ArtificialIntelligence.html#method-i-getLinesMade","(tetromino)","<p>param tetromino is the tetromino location to use for the heuristic. return\nan almost arbitrarily large ...\n"],["getOrientation","BackwardLBlock","BackwardLBlock.html#method-i-getOrientation","(row, col)","<p>param row is the row of the center reference Block param col is the column\nof the center reference Block ...\n"],["getOrientation","LBlock","LBlock.html#method-i-getOrientation","(row, col)","<p>param row is the row of the center reference Block param col is the column\nof the center reference Block ...\n"],["getOrientation","TBlock","TBlock.html#method-i-getOrientation","(row, col)","<p>param row is the row of the center reference Block param col is the column\nof the center reference Block ...\n"],["getRightBound","Board","Board.html#method-i-getRightBound","()","<p>return the right boundary of the Board\n"],["getRotatedBlocks","LineBlock","LineBlock.html#method-i-getRotatedBlocks","(row, col)","<p>param row is the row of the center block param col is the column of the\ncenter block return the Block ...\n"],["getRotatedBlocks","SBlock","SBlock.html#method-i-getRotatedBlocks","(row, col)","<p>param row is the row of the center block param col is the column of the\ncenter block return the Block ...\n"],["getRotatedBlocks","ZBlock","ZBlock.html#method-i-getRotatedBlocks","(row, col)","<p>param row is the row of the center block param col is the column of the\ncenter block return the Block ...\n"],["getRotationType","Tetromino","Tetromino.html#method-i-getRotationType","()","<p>return the rotation type for this Tetromino (none, two, or four)\n"],["getRow","Block","Block.html#method-i-getRow","()","<p>return the row that this Block is in on the Board.\n"],["getRow","Board","Board.html#method-i-getRow","(index)","<p>param index is the number of the row on the Board return an array\nrepresenting the specified row on the ...\n"],["getTopBound","Board","Board.html#method-i-getTopBound","()","<p>return the top boundary of the Board\n"],["getType","Tetromino","Tetromino.html#method-i-getType","()","<p>return the type of this Tetromino (eg SQUARE, LINE, etc.)\n"],["getUnrotatedBlocks","LineBlock","LineBlock.html#method-i-getUnrotatedBlocks","(row, col)","<p>param row is the row of the center block param col is the column of the\ncenter block return the Block ...\n"],["getUnrotatedBlocks","SBlock","SBlock.html#method-i-getUnrotatedBlocks","(row, col)","<p>param row is the row of the center block param col is the column of the\ncenter block return the Block ...\n"],["getUnrotatedBlocks","ZBlock","ZBlock.html#method-i-getUnrotatedBlocks","(row, col)","<p>param row is the row of the center block param col is the column of the\ncenter block return the Block ...\n"],["gravityMove","TetrisWindow","TetrisWindow.html#method-i-gravityMove","()","<p>If gravity has taken over, do an automatic moveDown() and reset the gravity\ncounter return true if the ...\n"],["isLine?","Board","Board.html#method-i-isLine-3F","(row)","<p>param row is the row to test for line status return true if the given row\nis a line, false otherwise. ...\n"],["loadResources","Board","Board.html#method-i-loadResources","()","<p>Get the images to be used to render the board. return @block_images, the\narray of images where the index ...\n"],["moveDown","Block","Block.html#method-i-moveDown","()","<p>Move the Block down on the Board if possible.\n"],["moveDown","TetrisWindow","TetrisWindow.html#method-i-moveDown","()","<p>Handles moving a Tetromino while checking for a collision. Used for\ndownward moves for both gravity and ...\n"],["moveDown","Tetromino","Tetromino.html#method-i-moveDown","()","<p>Move every block in the Tetromino to downward one unit. return true if the\nmove was successful (no block ...\n"],["moveLeft","Block","Block.html#method-i-moveLeft","()","<p>Move the Block left on the Board if possible.\n"],["moveLeft","Tetromino","Tetromino.html#method-i-moveLeft","()","<p>Move every block in the Tetromino to the left one unit. return true if the\nmove was successful (no block ...\n"],["moveRight","Block","Block.html#method-i-moveRight","()","<p>Move the Block right on the Board if possible.\n"],["moveRight","Tetromino","Tetromino.html#method-i-moveRight","()","<p>Move every block in the Tetromino to the right one unit. return true if the\nmove was successful (no block ...\n"],["new","ArtificialIntelligence","ArtificialIntelligence.html#method-c-new","(board, tetromino)","<p>Constructor param board is the board to use for deciding on a move param\ntetromino is the tetromino that ...\n"],["new","BackwardLBlock","BackwardLBlock.html#method-c-new","(row, col)","<p>Constructor param row is the row of the block used to position all other\nblocks in the BackwardLBlock ...\n"],["new","Block","Block.html#method-c-new","(row, col)","<p>Constructor param row is the row of the Block in the Board param col is the\ncolumn of the Block in the ...\n"],["new","Board","Board.html#method-c-new","()","<p>Constructor\n"],["new","LBlock","LBlock.html#method-c-new","(row, col)","<p>Constructor param row is the row of the block used to position all other\nblocks in the LBlock. param ...\n"],["new","LineBlock","LineBlock.html#method-c-new","(row, col)","<p>Constructor param row is the row of the block used to position all other\nblocks in the LineBlock. param ...\n"],["new","SBlock","SBlock.html#method-c-new","(row, col)","<p>Constructor param row is the row of the block used to position all other\nblocks in the SBlock. param ...\n"],["new","SquareBlock","SquareBlock.html#method-c-new","(row, col)","<p>Constructor param row is the row of the block used to position all other\nblocks in the SquareBlock. param ...\n"],["new","TBlock","TBlock.html#method-c-new","(row, col)","<p>Constructor param row is the row of the block used to position all other\nblocks in the TBlock. param ...\n"],["new","TetrisWindow","TetrisWindow.html#method-c-new","(mode)","<p>Constructor param mode is the game mode to use.  It will be AI_MODE unless\nthe program is in debug mode. ...\n"],["new","ZBlock","ZBlock.html#method-c-new","(row, col)","<p>Constructor param row is the row of the block used to position all other\nblocks in the ZBlock. param ...\n"],["placeTetromino","Object","Object.html#method-i-placeTetromino","(tetromino)","<p>Helper function to place the tetromino at the bototm of the board param\ntetromino is the tetromino to ...\n"],["placeTetrominoLeft","Object","Object.html#method-i-placeTetrominoLeft","(tetromino)","<p>Helper function to place the tetromino on the left side of the board param\ntetromino is the tetromino ...\n"],["placeTetrominoRight","Object","Object.html#method-i-placeTetrominoRight","(tetromino)","<p>Helper function to place the tetromino on the right side of the board param\ntetromino is the tetromino ...\n"],["removeLine","Board","Board.html#method-i-removeLine","(row_index)","<p>Remove the specified row from the Board and add an empty line to the top\nrow of the Board. param row_index ...\n"],["removeTetromino","Board","Board.html#method-i-removeTetromino","(tetromino)","<p>Set each block on the Board that corresponds to a block in the tetromino to\nbe the number that corresponds ...\n"],["rotateLeft","BackwardLBlock","BackwardLBlock.html#method-i-rotateLeft","()","<p>Rotate the BackwardLBlock clockwise.  The result is the same as rotating\nleft.\n"],["rotateLeft","LBlock","LBlock.html#method-i-rotateLeft","()","<p>Rotate the LBlock clockwise.  The result is the same as rotating right.\n"],["rotateLeft","LineBlock","LineBlock.html#method-i-rotateLeft","()","<p>Rotate the LineBlock clockwise.  The result is the same as rotating right.\n"],["rotateLeft","SBlock","SBlock.html#method-i-rotateLeft","()","<p>Rotate the SBlock clockwise.  The result is the same as rotating right.\n"],["rotateLeft","SquareBlock","SquareBlock.html#method-i-rotateLeft","()","<p>Squares look the same when they rotate left, but Tetrominoes must implement\na rotateLeft method\n"],["rotateLeft","TBlock","TBlock.html#method-i-rotateLeft","()","<p>Rotate the TBlock clockwise.  The result is the same as rotating right.\n"],["rotateLeft","Tetromino","Tetromino.html#method-i-rotateLeft","()","<p>Rotates the tetromino clockwise.\n"],["rotateLeft","ZBlock","ZBlock.html#method-i-rotateLeft","()","<p>Rotate the ZBlock clockwise.  The result is the same as rotating right.\n"],["rotateRight","BackwardLBlock","BackwardLBlock.html#method-i-rotateRight","()","<p>Rotate the BackwardLBlock counterclockwise.  The result is the same as\nrotating left.\n"],["rotateRight","LBlock","LBlock.html#method-i-rotateRight","()","<p>Rotate the LBlock counterclockwise.  The result is the same as rotating\nleft.\n"],["rotateRight","LineBlock","LineBlock.html#method-i-rotateRight","()","<p>Rotate the LineBlock counterclockwise.  The result is the same as rotating\nleft.\n"],["rotateRight","SBlock","SBlock.html#method-i-rotateRight","()","<p>Rotate the SBlock counterclockwise.  The result is the same as rotating\nleft.\n"],["rotateRight","SquareBlock","SquareBlock.html#method-i-rotateRight","()","<p>Squares look the same when they rotate right, but Tetrominoes must\nimplement a rotateRight method\n"],["rotateRight","TBlock","TBlock.html#method-i-rotateRight","()","<p>Rotate the TBlock counterclockwise.  The result is the same as rotating\nleft.\n"],["rotateRight","Tetromino","Tetromino.html#method-i-rotateRight","()","<p>Rotates the tetromino counter-clockwise\n"],["rotateRight","ZBlock","ZBlock.html#method-i-rotateRight","()","<p>Rotate the ZBlock counterclockwise.  The result is the same as rotating\nleft.\n"],["rotate_compare","Object","Object.html#method-i-rotate_compare","(tet1, tet2)","<p>Rotate comparison helper function.  Both tetrominoes should have blocks in\nequivalent positions. param ...\n"],["tryMoves","ArtificialIntelligence","ArtificialIntelligence.html#method-i-tryMoves","(rotation)","<p>Try all possible moves for the given rotation of the tetromino param\nrotation is the rotation to use ...\n"],["twoTypeRotate","Tetromino","Tetromino.html#method-i-twoTypeRotate","()","<p>Helper that does the actual rotation for blocks with only two orientations,\nsince rotateLeft and  rotate ...\n"],["update","TetrisWindow","TetrisWindow.html#method-i-update","()","<p>Update the board at every iteration of the game loop.\n"],["updateScore","TetrisWindow","TetrisWindow.html#method-i-updateScore","(lines_cleared)","<p>Update the score based on the standard Tetris scoring system, which\nmultiplies a scoring factor by the ...\n"],["userMoveDown","TetrisWindow","TetrisWindow.html#method-i-userMoveDown","()","<p>Moves the current Tetromino down if the button corresponding to a downward\nmove is pressed. Side effect: ...\n"],["userMoveRotate","TetrisWindow","TetrisWindow.html#method-i-userMoveRotate","()","<p>Do a rotate move if the user is pressing the button that corresponds to a\nrotate move. return true if ...\n"],["userMoveSideways","TetrisWindow","TetrisWindow.html#method-i-userMoveSideways","()","<p>Moves the current Tetromino left if the button corresponding to a left move\nis pressed and right if the ...\n"]]}}